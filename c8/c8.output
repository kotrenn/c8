State 88 conflicts: 1 shift/reduce


文法

    0 $accept: program $end

    1 program: program primary
    2        | primary

    3 primary: func
    4        | block

    5 func: FUN vardecl LPAREN args RPAREN blocklist NUF

    6 blocklist: blocklist block
    7          | block

    8 block: statement
    9      | ifblock
   10      | forblock
   11      | whileblock

   12 statement: exp SEMICOLON
   13          | vardecl ASSIGN exp SEMICOLON
   14          | vardecl SEMICOLON
   15          | RETURN exp SEMICOLON

   16 exp: SUB exp
   17    | MUL exp
   18    | BIT_AND exp
   19    | exp ADD exp
   20    | exp SUB exp
   21    | exp MUL exp
   22    | exp DIV exp
   23    | exp MOD exp
   24    | exp BIT_AND exp
   25    | exp BIT_OR exp
   26    | exp BIT_XOR exp
   27    | BIT_NOT exp
   28    | VAR SADD exp
   29    | VAR SSUB exp
   30    | VAR SMUL exp
   31    | VAR SDIV exp
   32    | VAR SMOD exp
   33    | VAR LPAREN argv RPAREN
   34    | LPAREN exp RPAREN
   35    | VAR ASSIGN exp
   36    | VAR
   37    | number

   38 boolexp: boolexp AND boolexp
   39        | boolexp OR boolexp
   40        | exp BOOL_EQ exp
   41        | exp BOOL_NEQ exp
   42        | exp BOOL_LEQ exp
   43        | exp BOOL_GEQ exp
   44        | exp BOOL_L exp
   45        | exp BOOL_G exp
   46        | LPAREN boolexp RPAREN
   47        | exp

   48 ifblock: IF LPAREN boolexp RPAREN blocklist ELSE blocklist FI
   49        | IF LPAREN boolexp RPAREN blocklist FI

   50 forblock: FOR LPAREN exp SEMICOLON boolexp SEMICOLON exp RPAREN blocklist ROF

   51 whileblock: WHILE LPAREN boolexp RPAREN blocklist ELIHW

   52 args: args COMMA vardecl
   53     | vardecl

   54 argv: argv COMMA exp
   55     | exp

   56 vardecl: vartype VAR

   57 vartype: TYPE_I pointers
   58        | TYPE_I
   59        | TYPE_F pointers
   60        | TYPE_F

   61 pointers: pointers MUL
   62         | MUL

   63 number: CONST_I
   64       | CONST_F


出現位置の規則による終端

$end (0) 0
error (256)
SEMICOLON (258) 12 13 14 15 50
COMMA (259) 52 54
IF (260) 48 49
ELSE (261) 48
FI (262) 48 49
FOR (263) 50
ROF (264) 50
WHILE (265) 51
ELIHW (266) 51
FUN (267) 5
NUF (268) 5
RETURN (269) 15
TYPE_I (270) 57 58
TYPE_F (271) 59 60
CONST_I (272) 63
CONST_F (273) 64
VAR (274) 28 29 30 31 32 33 35 36 56
ASSIGN (275) 13 35
SMOD (276) 32
SDIV (277) 31
SMUL (278) 30
SSUB (279) 29
SADD (280) 28
BOOL_L (281) 44
BOOL_G (282) 45
BOOL_LEQ (283) 42
BOOL_GEQ (284) 43
BOOL_NEQ (285) 41
BOOL_EQ (286) 40
OR (287) 39
AND (288) 38
BIT_OR (289) 25
BIT_XOR (290) 26
BIT_AND (291) 18 24
SUB (292) 16 20
ADD (293) 19
MOD (294) 23
DIV (295) 22
MUL (296) 17 21 61 62
UAND (297)
UMUL (298)
UMINUS (299)
BIT_NOT (300) 27
RPAREN (301) 5 33 34 46 48 49 50 51
LPAREN (302) 5 33 34 46 48 49 50 51


出現位置の規則による非終端

$accept (48)
    左辺: 0
program (49)
    左辺: 1 2, 右辺: 0 1
primary (50)
    左辺: 3 4, 右辺: 1 2
func (51)
    左辺: 5, 右辺: 3
blocklist (52)
    左辺: 6 7, 右辺: 5 6 48 49 50 51
block (53)
    左辺: 8 9 10 11, 右辺: 4 6 7
statement (54)
    左辺: 12 13 14 15, 右辺: 8
exp (55)
    左辺: 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
    35 36 37, 右辺: 12 13 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    29 30 31 32 34 35 40 41 42 43 44 45 47 50 54 55
boolexp (56)
    左辺: 38 39 40 41 42 43 44 45 46 47, 右辺: 38 39 46 48 49 50 51
ifblock (57)
    左辺: 48 49, 右辺: 9
forblock (58)
    左辺: 50, 右辺: 10
whileblock (59)
    左辺: 51, 右辺: 11
args (60)
    左辺: 52 53, 右辺: 5 52
argv (61)
    左辺: 54 55, 右辺: 33 54
vardecl (62)
    左辺: 56, 右辺: 5 13 14 52 53
vartype (63)
    左辺: 57 58 59 60, 右辺: 56
pointers (64)
    左辺: 61 62, 右辺: 57 59 61
number (65)
    左辺: 63 64, 右辺: 37


状態 0

    0 $accept: . program $end

    IF       shift, and go to state 1
    FOR      shift, and go to state 2
    WHILE    shift, and go to state 3
    FUN      shift, and go to state 4
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    program     go to state 16
    primary     go to state 17
    func        go to state 18
    block       go to state 19
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 1

   48 ifblock: IF . LPAREN boolexp RPAREN blocklist ELSE blocklist FI
   49        | IF . LPAREN boolexp RPAREN blocklist FI

    LPAREN  shift, and go to state 28


状態 2

   50 forblock: FOR . LPAREN exp SEMICOLON boolexp SEMICOLON exp RPAREN blocklist ROF

    LPAREN  shift, and go to state 29


状態 3

   51 whileblock: WHILE . LPAREN boolexp RPAREN blocklist ELIHW

    LPAREN  shift, and go to state 30


状態 4

    5 func: FUN . vardecl LPAREN args RPAREN blocklist NUF

    TYPE_I  shift, and go to state 6
    TYPE_F  shift, and go to state 7

    vardecl  go to state 31
    vartype  go to state 26


状態 5

   15 statement: RETURN . exp SEMICOLON

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 32
    number  go to state 27


状態 6

   57 vartype: TYPE_I . pointers
   58        | TYPE_I .

    MUL  shift, and go to state 33

    $default  reduce using rule 58 (vartype)

    pointers  go to state 34


状態 7

   59 vartype: TYPE_F . pointers
   60        | TYPE_F .

    MUL  shift, and go to state 33

    $default  reduce using rule 60 (vartype)

    pointers  go to state 35


状態 8

   63 number: CONST_I .

    $default  reduce using rule 63 (number)


状態 9

   64 number: CONST_F .

    $default  reduce using rule 64 (number)


状態 10

   28 exp: VAR . SADD exp
   29    | VAR . SSUB exp
   30    | VAR . SMUL exp
   31    | VAR . SDIV exp
   32    | VAR . SMOD exp
   33    | VAR . LPAREN argv RPAREN
   35    | VAR . ASSIGN exp
   36    | VAR .

    ASSIGN  shift, and go to state 36
    SMOD    shift, and go to state 37
    SDIV    shift, and go to state 38
    SMUL    shift, and go to state 39
    SSUB    shift, and go to state 40
    SADD    shift, and go to state 41
    LPAREN  shift, and go to state 42

    $default  reduce using rule 36 (exp)


状態 11

   18 exp: BIT_AND . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 43
    number  go to state 27


状態 12

   16 exp: SUB . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 44
    number  go to state 27


状態 13

   17 exp: MUL . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 45
    number  go to state 27


状態 14

   27 exp: BIT_NOT . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 46
    number  go to state 27


状態 15

   34 exp: LPAREN . exp RPAREN

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 47
    number  go to state 27


状態 16

    0 $accept: program . $end
    1 program: program . primary

    $end     shift, and go to state 48
    IF       shift, and go to state 1
    FOR      shift, and go to state 2
    WHILE    shift, and go to state 3
    FUN      shift, and go to state 4
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    primary     go to state 49
    func        go to state 18
    block       go to state 19
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 17

    2 program: primary .

    $default  reduce using rule 2 (program)


状態 18

    3 primary: func .

    $default  reduce using rule 3 (primary)


状態 19

    4 primary: block .

    $default  reduce using rule 4 (primary)


状態 20

    8 block: statement .

    $default  reduce using rule 8 (block)


状態 21

   12 statement: exp . SEMICOLON
   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    SEMICOLON  shift, and go to state 50
    BIT_OR     shift, and go to state 51
    BIT_XOR    shift, and go to state 52
    BIT_AND    shift, and go to state 53
    SUB        shift, and go to state 54
    ADD        shift, and go to state 55
    MOD        shift, and go to state 56
    DIV        shift, and go to state 57
    MUL        shift, and go to state 58


状態 22

    9 block: ifblock .

    $default  reduce using rule 9 (block)


状態 23

   10 block: forblock .

    $default  reduce using rule 10 (block)


状態 24

   11 block: whileblock .

    $default  reduce using rule 11 (block)


状態 25

   13 statement: vardecl . ASSIGN exp SEMICOLON
   14          | vardecl . SEMICOLON

    SEMICOLON  shift, and go to state 59
    ASSIGN     shift, and go to state 60


状態 26

   56 vardecl: vartype . VAR

    VAR  shift, and go to state 61


状態 27

   37 exp: number .

    $default  reduce using rule 37 (exp)


状態 28

   48 ifblock: IF LPAREN . boolexp RPAREN blocklist ELSE blocklist FI
   49        | IF LPAREN . boolexp RPAREN blocklist FI

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 62

    exp      go to state 63
    boolexp  go to state 64
    number   go to state 27


状態 29

   50 forblock: FOR LPAREN . exp SEMICOLON boolexp SEMICOLON exp RPAREN blocklist ROF

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 65
    number  go to state 27


状態 30

   51 whileblock: WHILE LPAREN . boolexp RPAREN blocklist ELIHW

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 62

    exp      go to state 63
    boolexp  go to state 66
    number   go to state 27


状態 31

    5 func: FUN vardecl . LPAREN args RPAREN blocklist NUF

    LPAREN  shift, and go to state 67


状態 32

   15 statement: RETURN exp . SEMICOLON
   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    SEMICOLON  shift, and go to state 68
    BIT_OR     shift, and go to state 51
    BIT_XOR    shift, and go to state 52
    BIT_AND    shift, and go to state 53
    SUB        shift, and go to state 54
    ADD        shift, and go to state 55
    MOD        shift, and go to state 56
    DIV        shift, and go to state 57
    MUL        shift, and go to state 58


状態 33

   62 pointers: MUL .

    $default  reduce using rule 62 (pointers)


状態 34

   57 vartype: TYPE_I pointers .
   61 pointers: pointers . MUL

    MUL  shift, and go to state 69

    $default  reduce using rule 57 (vartype)


状態 35

   59 vartype: TYPE_F pointers .
   61 pointers: pointers . MUL

    MUL  shift, and go to state 69

    $default  reduce using rule 59 (vartype)


状態 36

   35 exp: VAR ASSIGN . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 70
    number  go to state 27


状態 37

   32 exp: VAR SMOD . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 71
    number  go to state 27


状態 38

   31 exp: VAR SDIV . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 72
    number  go to state 27


状態 39

   30 exp: VAR SMUL . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 73
    number  go to state 27


状態 40

   29 exp: VAR SSUB . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 74
    number  go to state 27


状態 41

   28 exp: VAR SADD . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 75
    number  go to state 27


状態 42

   33 exp: VAR LPAREN . argv RPAREN

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 76
    argv    go to state 77
    number  go to state 27


状態 43

   18 exp: BIT_AND exp .
   19    | exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    $default  reduce using rule 18 (exp)


状態 44

   16 exp: SUB exp .
   19    | exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    $default  reduce using rule 16 (exp)


状態 45

   17 exp: MUL exp .
   19    | exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    $default  reduce using rule 17 (exp)


状態 46

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   27    | BIT_NOT exp .

    $default  reduce using rule 27 (exp)


状態 47

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   34    | LPAREN exp . RPAREN

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58
    RPAREN   shift, and go to state 78


状態 48

    0 $accept: program $end .

    $default  accept


状態 49

    1 program: program primary .

    $default  reduce using rule 1 (program)


状態 50

   12 statement: exp SEMICOLON .

    $default  reduce using rule 12 (statement)


状態 51

   25 exp: exp BIT_OR . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 79
    number  go to state 27


状態 52

   26 exp: exp BIT_XOR . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 80
    number  go to state 27


状態 53

   24 exp: exp BIT_AND . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 81
    number  go to state 27


状態 54

   20 exp: exp SUB . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 82
    number  go to state 27


状態 55

   19 exp: exp ADD . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 83
    number  go to state 27


状態 56

   23 exp: exp MOD . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 84
    number  go to state 27


状態 57

   22 exp: exp DIV . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 85
    number  go to state 27


状態 58

   21 exp: exp MUL . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 86
    number  go to state 27


状態 59

   14 statement: vardecl SEMICOLON .

    $default  reduce using rule 14 (statement)


状態 60

   13 statement: vardecl ASSIGN . exp SEMICOLON

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 87
    number  go to state 27


状態 61

   56 vardecl: vartype VAR .

    $default  reduce using rule 56 (vardecl)


状態 62

   34 exp: LPAREN . exp RPAREN
   46 boolexp: LPAREN . boolexp RPAREN

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 62

    exp      go to state 88
    boolexp  go to state 89
    number   go to state 27


状態 63

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   40 boolexp: exp . BOOL_EQ exp
   41        | exp . BOOL_NEQ exp
   42        | exp . BOOL_LEQ exp
   43        | exp . BOOL_GEQ exp
   44        | exp . BOOL_L exp
   45        | exp . BOOL_G exp
   47        | exp .

    BOOL_L    shift, and go to state 90
    BOOL_G    shift, and go to state 91
    BOOL_LEQ  shift, and go to state 92
    BOOL_GEQ  shift, and go to state 93
    BOOL_NEQ  shift, and go to state 94
    BOOL_EQ   shift, and go to state 95
    BIT_OR    shift, and go to state 51
    BIT_XOR   shift, and go to state 52
    BIT_AND   shift, and go to state 53
    SUB       shift, and go to state 54
    ADD       shift, and go to state 55
    MOD       shift, and go to state 56
    DIV       shift, and go to state 57
    MUL       shift, and go to state 58

    $default  reduce using rule 47 (boolexp)


状態 64

   38 boolexp: boolexp . AND boolexp
   39        | boolexp . OR boolexp
   48 ifblock: IF LPAREN boolexp . RPAREN blocklist ELSE blocklist FI
   49        | IF LPAREN boolexp . RPAREN blocklist FI

    OR      shift, and go to state 96
    AND     shift, and go to state 97
    RPAREN  shift, and go to state 98


状態 65

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   50 forblock: FOR LPAREN exp . SEMICOLON boolexp SEMICOLON exp RPAREN blocklist ROF

    SEMICOLON  shift, and go to state 99
    BIT_OR     shift, and go to state 51
    BIT_XOR    shift, and go to state 52
    BIT_AND    shift, and go to state 53
    SUB        shift, and go to state 54
    ADD        shift, and go to state 55
    MOD        shift, and go to state 56
    DIV        shift, and go to state 57
    MUL        shift, and go to state 58


状態 66

   38 boolexp: boolexp . AND boolexp
   39        | boolexp . OR boolexp
   51 whileblock: WHILE LPAREN boolexp . RPAREN blocklist ELIHW

    OR      shift, and go to state 96
    AND     shift, and go to state 97
    RPAREN  shift, and go to state 100


状態 67

    5 func: FUN vardecl LPAREN . args RPAREN blocklist NUF

    TYPE_I  shift, and go to state 6
    TYPE_F  shift, and go to state 7

    args     go to state 101
    vardecl  go to state 102
    vartype  go to state 26


状態 68

   15 statement: RETURN exp SEMICOLON .

    $default  reduce using rule 15 (statement)


状態 69

   61 pointers: pointers MUL .

    $default  reduce using rule 61 (pointers)


状態 70

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   35    | VAR ASSIGN exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 35 (exp)


状態 71

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   32    | VAR SMOD exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 32 (exp)


状態 72

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   31    | VAR SDIV exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 31 (exp)


状態 73

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   30    | VAR SMUL exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 30 (exp)


状態 74

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   29    | VAR SSUB exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 29 (exp)


状態 75

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   28    | VAR SADD exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 28 (exp)


状態 76

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   55 argv: exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 55 (argv)


状態 77

   33 exp: VAR LPAREN argv . RPAREN
   54 argv: argv . COMMA exp

    COMMA   shift, and go to state 103
    RPAREN  shift, and go to state 104


状態 78

   34 exp: LPAREN exp RPAREN .

    $default  reduce using rule 34 (exp)


状態 79

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   25    | exp BIT_OR exp .
   26    | exp . BIT_XOR exp

    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 25 (exp)


状態 80

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   26    | exp BIT_XOR exp .

    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 26 (exp)


状態 81

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   24    | exp BIT_AND exp .
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MOD  shift, and go to state 56
    DIV  shift, and go to state 57
    MUL  shift, and go to state 58

    $default  reduce using rule 24 (exp)


状態 82

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   20    | exp SUB exp .
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    MOD  shift, and go to state 56
    DIV  shift, and go to state 57
    MUL  shift, and go to state 58

    $default  reduce using rule 20 (exp)


状態 83

   19 exp: exp . ADD exp
   19    | exp ADD exp .
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    MOD  shift, and go to state 56
    DIV  shift, and go to state 57
    MUL  shift, and go to state 58

    $default  reduce using rule 19 (exp)


状態 84

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   23    | exp MOD exp .
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    $default  reduce using rule 23 (exp)


状態 85

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   22    | exp DIV exp .
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    $default  reduce using rule 22 (exp)


状態 86

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   21    | exp MUL exp .
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    $default  reduce using rule 21 (exp)


状態 87

   13 statement: vardecl ASSIGN exp . SEMICOLON
   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp

    SEMICOLON  shift, and go to state 105
    BIT_OR     shift, and go to state 51
    BIT_XOR    shift, and go to state 52
    BIT_AND    shift, and go to state 53
    SUB        shift, and go to state 54
    ADD        shift, and go to state 55
    MOD        shift, and go to state 56
    DIV        shift, and go to state 57
    MUL        shift, and go to state 58


状態 88

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   34    | LPAREN exp . RPAREN
   40 boolexp: exp . BOOL_EQ exp
   41        | exp . BOOL_NEQ exp
   42        | exp . BOOL_LEQ exp
   43        | exp . BOOL_GEQ exp
   44        | exp . BOOL_L exp
   45        | exp . BOOL_G exp
   47        | exp .

    BOOL_L    shift, and go to state 90
    BOOL_G    shift, and go to state 91
    BOOL_LEQ  shift, and go to state 92
    BOOL_GEQ  shift, and go to state 93
    BOOL_NEQ  shift, and go to state 94
    BOOL_EQ   shift, and go to state 95
    BIT_OR    shift, and go to state 51
    BIT_XOR   shift, and go to state 52
    BIT_AND   shift, and go to state 53
    SUB       shift, and go to state 54
    ADD       shift, and go to state 55
    MOD       shift, and go to state 56
    DIV       shift, and go to state 57
    MUL       shift, and go to state 58
    RPAREN    shift, and go to state 78

    RPAREN    [reduce using rule 47 (boolexp)]
    $default  reduce using rule 47 (boolexp)


状態 89

   38 boolexp: boolexp . AND boolexp
   39        | boolexp . OR boolexp
   46        | LPAREN boolexp . RPAREN

    OR      shift, and go to state 96
    AND     shift, and go to state 97
    RPAREN  shift, and go to state 106


状態 90

   44 boolexp: exp BOOL_L . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 107
    number  go to state 27


状態 91

   45 boolexp: exp BOOL_G . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 108
    number  go to state 27


状態 92

   42 boolexp: exp BOOL_LEQ . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 109
    number  go to state 27


状態 93

   43 boolexp: exp BOOL_GEQ . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 110
    number  go to state 27


状態 94

   41 boolexp: exp BOOL_NEQ . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 111
    number  go to state 27


状態 95

   40 boolexp: exp BOOL_EQ . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 112
    number  go to state 27


状態 96

   39 boolexp: boolexp OR . boolexp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 62

    exp      go to state 63
    boolexp  go to state 113
    number   go to state 27


状態 97

   38 boolexp: boolexp AND . boolexp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 62

    exp      go to state 63
    boolexp  go to state 114
    number   go to state 27


状態 98

   48 ifblock: IF LPAREN boolexp RPAREN . blocklist ELSE blocklist FI
   49        | IF LPAREN boolexp RPAREN . blocklist FI

    IF       shift, and go to state 1
    FOR      shift, and go to state 2
    WHILE    shift, and go to state 3
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    blocklist   go to state 115
    block       go to state 116
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 99

   50 forblock: FOR LPAREN exp SEMICOLON . boolexp SEMICOLON exp RPAREN blocklist ROF

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 62

    exp      go to state 63
    boolexp  go to state 117
    number   go to state 27


状態 100

   51 whileblock: WHILE LPAREN boolexp RPAREN . blocklist ELIHW

    IF       shift, and go to state 1
    FOR      shift, and go to state 2
    WHILE    shift, and go to state 3
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    blocklist   go to state 118
    block       go to state 116
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 101

    5 func: FUN vardecl LPAREN args . RPAREN blocklist NUF
   52 args: args . COMMA vardecl

    COMMA   shift, and go to state 119
    RPAREN  shift, and go to state 120


状態 102

   53 args: vardecl .

    $default  reduce using rule 53 (args)


状態 103

   54 argv: argv COMMA . exp

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 121
    number  go to state 27


状態 104

   33 exp: VAR LPAREN argv RPAREN .

    $default  reduce using rule 33 (exp)


状態 105

   13 statement: vardecl ASSIGN exp SEMICOLON .

    $default  reduce using rule 13 (statement)


状態 106

   46 boolexp: LPAREN boolexp RPAREN .

    $default  reduce using rule 46 (boolexp)


状態 107

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   44 boolexp: exp BOOL_L exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 44 (boolexp)


状態 108

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   45 boolexp: exp BOOL_G exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 45 (boolexp)


状態 109

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   42 boolexp: exp BOOL_LEQ exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 42 (boolexp)


状態 110

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   43 boolexp: exp BOOL_GEQ exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 43 (boolexp)


状態 111

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   41 boolexp: exp BOOL_NEQ exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 41 (boolexp)


状態 112

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   40 boolexp: exp BOOL_EQ exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 40 (boolexp)


状態 113

   38 boolexp: boolexp . AND boolexp
   39        | boolexp . OR boolexp
   39        | boolexp OR boolexp .

    AND  shift, and go to state 97

    $default  reduce using rule 39 (boolexp)


状態 114

   38 boolexp: boolexp . AND boolexp
   38        | boolexp AND boolexp .
   39        | boolexp . OR boolexp

    $default  reduce using rule 38 (boolexp)


状態 115

    6 blocklist: blocklist . block
   48 ifblock: IF LPAREN boolexp RPAREN blocklist . ELSE blocklist FI
   49        | IF LPAREN boolexp RPAREN blocklist . FI

    IF       shift, and go to state 1
    ELSE     shift, and go to state 122
    FI       shift, and go to state 123
    FOR      shift, and go to state 2
    WHILE    shift, and go to state 3
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    block       go to state 124
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 116

    7 blocklist: block .

    $default  reduce using rule 7 (blocklist)


状態 117

   38 boolexp: boolexp . AND boolexp
   39        | boolexp . OR boolexp
   50 forblock: FOR LPAREN exp SEMICOLON boolexp . SEMICOLON exp RPAREN blocklist ROF

    SEMICOLON  shift, and go to state 125
    OR         shift, and go to state 96
    AND        shift, and go to state 97


状態 118

    6 blocklist: blocklist . block
   51 whileblock: WHILE LPAREN boolexp RPAREN blocklist . ELIHW

    IF       shift, and go to state 1
    FOR      shift, and go to state 2
    WHILE    shift, and go to state 3
    ELIHW    shift, and go to state 126
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    block       go to state 124
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 119

   52 args: args COMMA . vardecl

    TYPE_I  shift, and go to state 6
    TYPE_F  shift, and go to state 7

    vardecl  go to state 127
    vartype  go to state 26


状態 120

    5 func: FUN vardecl LPAREN args RPAREN . blocklist NUF

    IF       shift, and go to state 1
    FOR      shift, and go to state 2
    WHILE    shift, and go to state 3
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    blocklist   go to state 128
    block       go to state 116
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 121

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   54 argv: argv COMMA exp .

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58

    $default  reduce using rule 54 (argv)


状態 122

   48 ifblock: IF LPAREN boolexp RPAREN blocklist ELSE . blocklist FI

    IF       shift, and go to state 1
    FOR      shift, and go to state 2
    WHILE    shift, and go to state 3
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    blocklist   go to state 129
    block       go to state 116
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 123

   49 ifblock: IF LPAREN boolexp RPAREN blocklist FI .

    $default  reduce using rule 49 (ifblock)


状態 124

    6 blocklist: blocklist block .

    $default  reduce using rule 6 (blocklist)


状態 125

   50 forblock: FOR LPAREN exp SEMICOLON boolexp SEMICOLON . exp RPAREN blocklist ROF

    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    exp     go to state 130
    number  go to state 27


状態 126

   51 whileblock: WHILE LPAREN boolexp RPAREN blocklist ELIHW .

    $default  reduce using rule 51 (whileblock)


状態 127

   52 args: args COMMA vardecl .

    $default  reduce using rule 52 (args)


状態 128

    5 func: FUN vardecl LPAREN args RPAREN blocklist . NUF
    6 blocklist: blocklist . block

    IF       shift, and go to state 1
    FOR      shift, and go to state 2
    WHILE    shift, and go to state 3
    NUF      shift, and go to state 131
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    block       go to state 124
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 129

    6 blocklist: blocklist . block
   48 ifblock: IF LPAREN boolexp RPAREN blocklist ELSE blocklist . FI

    IF       shift, and go to state 1
    FI       shift, and go to state 132
    FOR      shift, and go to state 2
    WHILE    shift, and go to state 3
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    block       go to state 124
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 130

   19 exp: exp . ADD exp
   20    | exp . SUB exp
   21    | exp . MUL exp
   22    | exp . DIV exp
   23    | exp . MOD exp
   24    | exp . BIT_AND exp
   25    | exp . BIT_OR exp
   26    | exp . BIT_XOR exp
   50 forblock: FOR LPAREN exp SEMICOLON boolexp SEMICOLON exp . RPAREN blocklist ROF

    BIT_OR   shift, and go to state 51
    BIT_XOR  shift, and go to state 52
    BIT_AND  shift, and go to state 53
    SUB      shift, and go to state 54
    ADD      shift, and go to state 55
    MOD      shift, and go to state 56
    DIV      shift, and go to state 57
    MUL      shift, and go to state 58
    RPAREN   shift, and go to state 133


状態 131

    5 func: FUN vardecl LPAREN args RPAREN blocklist NUF .

    $default  reduce using rule 5 (func)


状態 132

   48 ifblock: IF LPAREN boolexp RPAREN blocklist ELSE blocklist FI .

    $default  reduce using rule 48 (ifblock)


状態 133

   50 forblock: FOR LPAREN exp SEMICOLON boolexp SEMICOLON exp RPAREN . blocklist ROF

    IF       shift, and go to state 1
    FOR      shift, and go to state 2
    WHILE    shift, and go to state 3
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    blocklist   go to state 134
    block       go to state 116
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 134

    6 blocklist: blocklist . block
   50 forblock: FOR LPAREN exp SEMICOLON boolexp SEMICOLON exp RPAREN blocklist . ROF

    IF       shift, and go to state 1
    FOR      shift, and go to state 2
    ROF      shift, and go to state 135
    WHILE    shift, and go to state 3
    RETURN   shift, and go to state 5
    TYPE_I   shift, and go to state 6
    TYPE_F   shift, and go to state 7
    CONST_I  shift, and go to state 8
    CONST_F  shift, and go to state 9
    VAR      shift, and go to state 10
    BIT_AND  shift, and go to state 11
    SUB      shift, and go to state 12
    MUL      shift, and go to state 13
    BIT_NOT  shift, and go to state 14
    LPAREN   shift, and go to state 15

    block       go to state 124
    statement   go to state 20
    exp         go to state 21
    ifblock     go to state 22
    forblock    go to state 23
    whileblock  go to state 24
    vardecl     go to state 25
    vartype     go to state 26
    number      go to state 27


状態 135

   50 forblock: FOR LPAREN exp SEMICOLON boolexp SEMICOLON exp RPAREN blocklist ROF .

    $default  reduce using rule 50 (forblock)
